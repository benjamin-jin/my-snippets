#!/bin/env python3
import os
import sys
import jinja2
import argparse
MODULE_DEFAULT="/tools/Modules/default"
MODULEFILES_DIRECTORY=f"{MODULE_DEFAULT}/modulefiles"
TEMPLATE_FILE = "template"
DEFAULT_MAIN_ROOT = "/tools"
# LOAD TEMPLATE
templateLoader = jinja2.FileSystemLoader(searchpath=MODULE_DEFAULT)
templateEnv = jinja2.Environment(loader=templateLoader)
template = templateEnv.get_template(TEMPLATE_FILE)
def parsed():
  parser = argparse.ArgumentParser(description='Parsing Arguments')
  subparsers = parser.add_subparsers(
                title='subcommands',
                dest='command',
                metavar='<command>',
                help='<description>')
  tty_paser     = subparsers.add_parser("tty", help="Use tty-mode")
  non_tty_paser = subparsers.add_parser("none", help="None tty-mode")
  non_tty_paser.add_argument("--org", help="Organization Name", dest="organization", default="")
  non_tty_paser.add_argument("--tool", help="Tool Name", required=True)
  non_tty_paser.add_argument("--version", help="Tool Version", required=True)
  non_tty_paser.add_argument("--base", default="/tools", help="Base Directory")
  non_tty_paser.add_argument("--force", "-f", action="store_true")
  return parser.parse_args()
def main():
  args = parsed()
# ASK REEQUIRED
  org   = input('Organization [""] : ')   if args.command != "none" else args.organization
  name  = input ('Tool [""] : ')          if args.command != "none" else args.tool

  if name == "":
    sys.exit("Tool name should not be empty")
  tool = os.path.join(org, name)
  directory = os.path.join(MODULEFILES_DIRECTORY, tool)
  if not os.path.isdir(directory):
    os.makedirs(directory)
  version = input ('Version [""] : ')     if args.command != "none" else args.version
  filename = os.path.join(directory, version)

  MAIN_ROOT = input (f'Main ROOT ["{DEFAULT_MAIN_ROOT}"] : ') if args.command != "none" else args.base
  if MAIN_ROOT == "" or not MAIN_ROOT.startswith("/") :
    MAIN_ROOT = DEFAULT_MAIN_ROOT

  if not os.path.isfile(filename) or (args.command == "none" and args.force):
    if org == "":
      org = '""'
    out = template.render(tool=tool, version=version, organization=org, name=name, base=MAIN_ROOT)
    with open(filename, "w") as f:
      f.write(out)
  else:
    print(f'Already exists : {os.path.join(tool,version)}')

if __name__ == "__main__":
  main()